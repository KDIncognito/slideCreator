from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor
from typing import Dict, List, Any
from pathlib import Path
import os
from ..utils.logger import get_logger

class PowerPointGenerator:
    """Generates PowerPoint presentations from slide structure data."""
    
    def __init__(self):
        self.presentation = None
        self.logger = get_logger()
    
    def create_presentation(self, slides_data: Dict, output_path: str, 
                          visual_mappings: List = None) -> str:
        """
        Create a PowerPoint presentation from slide structure data.
        
        Args:
            slides_data: Structured slide data from AI processing
            output_path: Path where to save the presentation
            visual_mappings: Optional visual mappings from PDF analysis
            
        Returns:
            Path to the created PowerPoint file
        """
        
        self.logger.info("(>>>) Creating PowerPoint presentation")
        
        # Create new presentation
        self.presentation = Presentation()
        
        # Get slides from data
        slides = slides_data.get('slides', [])
        presentation_title = slides_data.get('presentation_title', 'Generated Presentation')
        
        self.logger.debug(f"Creating presentation with {len(slides)} slides")
        
        # Create title slide
        self._create_title_slide(presentation_title)
        
        # Create content slides
        for i, slide_data in enumerate(slides):
            self.logger.debug(f"Creating slide {i+1}: {slide_data.get('title', 'Untitled')}")
            self._create_content_slide(slide_data, visual_mappings)
        
        # Save presentation
        output_path = Path(output_path)
        self.presentation.save(str(output_path))
        
        self.logger.info(f"(!!!) PowerPoint presentation saved to: {output_path}")
        
        return str(output_path)
    
    def _create_title_slide(self, title: str):
        """Create the title slide."""
        
        # Use title slide layout (usually layout 0)
        title_slide_layout = self.presentation.slide_layouts[0]
        slide = self.presentation.slides.add_slide(title_slide_layout)
        
        # Set title
        title_placeholder = slide.shapes.title
        title_placeholder.text = title
        
        # Set subtitle
        subtitle_placeholder = slide.placeholders[1]
        subtitle_placeholder.text = "Generated by SlideCreator AI\nFrom PDF Document Analysis"
        
        # Style the title
        title_placeholder.text_frame.paragraphs[0].font.size = Pt(44)
        title_placeholder.text_frame.paragraphs[0].font.bold = True
        title_placeholder.text_frame.paragraphs[0].font.color.rgb = RGBColor(0, 51, 102)
    
    def _create_content_slide(self, slide_data: Dict, visual_mappings: List = None):
        """Create a content slide from slide data."""
        
        # Determine layout based on slide data
        layout_type = slide_data.get('suggested_layout_type', 'TITLE_BULLETS')
        
        if layout_type in ['TITLE_BULLETS', 'TITLE_CONTENT_BULLETS']:
            layout = self.presentation.slide_layouts[1]  # Title and Content
        else:
            layout = self.presentation.slide_layouts[1]  # Default to Title and Content
        
        slide = self.presentation.slides.add_slide(layout)
        
        # Set slide title
        title = slide_data.get('title', 'Slide Title')
        slide.shapes.title.text = title
        
        # Style title
        slide.shapes.title.text_frame.paragraphs[0].font.size = Pt(36)
        slide.shapes.title.text_frame.paragraphs[0].font.bold = True
        slide.shapes.title.text_frame.paragraphs[0].font.color.rgb = RGBColor(0, 51, 102)
        
        # Add bullet points
        bullet_points = slide_data.get('bullet_points', [])
        if bullet_points:
            self._add_bullet_points(slide, bullet_points)
        
        # Add visual placeholder if needed
        visual_placeholder = slide_data.get('generated_visual_placeholder')
        if visual_placeholder and visual_placeholder.get('need_image'):
            self._add_visual_placeholder(slide, visual_placeholder)
        
        # Add existing visual if suggested
        existing_visual = slide_data.get('recommended_existing_visual')
        if existing_visual:
            self._add_existing_visual(slide, existing_visual)
    
    def _add_bullet_points(self, slide, bullet_points: List[str]):
        """Add bullet points to a slide."""
        
        # Get the content placeholder (usually index 1)
        content_placeholder = None
        for shape in slide.placeholders:
            if shape.placeholder_format.idx == 1:  # Content placeholder
                content_placeholder = shape
                break
        
        if content_placeholder:
            text_frame = content_placeholder.text_frame
            text_frame.clear()  # Clear default text
            
            for i, bullet_text in enumerate(bullet_points):
                if i == 0:
                    p = text_frame.paragraphs[0]
                else:
                    p = text_frame.add_paragraph()
                
                p.text = bullet_text
                p.level = 0  # Top level bullet
                p.font.size = Pt(24)
                p.font.color.rgb = RGBColor(64, 64, 64)
    
    def _add_visual_placeholder(self, slide, visual_placeholder: Dict):
        """Add a placeholder for a visual element."""
        
        # Add a text box indicating where the visual should go
        left = Inches(6)
        top = Inches(2)
        width = Inches(4)
        height = Inches(3)
        
        textbox = slide.shapes.add_textbox(left, top, width, height)
        text_frame = textbox.text_frame
        
        description = visual_placeholder.get('description_for_audience', 'Visual Placeholder')
        text_frame.text = f"[{description}]"
        
        # Style the placeholder
        text_frame.paragraphs[0].font.size = Pt(16)
        text_frame.paragraphs[0].font.italic = True
        text_frame.paragraphs[0].font.color.rgb = RGBColor(128, 128, 128)
        text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
        
        # Add border to make it visible
        textbox.line.color.rgb = RGBColor(200, 200, 200)
        textbox.line.width = Pt(1)
    
    def _add_existing_visual(self, slide, existing_visual: Dict):
        """Add reference to an existing visual from the PDF."""
        
        # Add a text box indicating the existing visual
        left = Inches(6)
        top = Inches(4.5)
        width = Inches(4)
        height = Inches(1.5)
        
        textbox = slide.shapes.add_textbox(left, top, width, height)
        text_frame = textbox.text_frame
        
        visual_info = existing_visual.get('visual_element', {})
        visual_type = visual_info.get('element_type', 'visual')
        
        text_frame.text = f"[Reference: {visual_type} from original document]"
        
        # Style the reference
        text_frame.paragraphs[0].font.size = Pt(14)
        text_frame.paragraphs[0].font.italic = True
        text_frame.paragraphs[0].font.color.rgb = RGBColor(100, 100, 150)
        text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
